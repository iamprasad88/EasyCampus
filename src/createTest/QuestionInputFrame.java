/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QuestionInputFrame.java
 *
 * Created on May 8, 2009, 5:22:36 PM
 */
package createTest;

import helper.Answer;
import helper.Question;
import helper.QuestionAnswer;
import helper.Section;
import helper.Test;
import java.awt.Event;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author prasad
 */
public class QuestionInputFrame extends javax.swing.JFrame
{

    private static final long serialVersionUID = 8440140812230164930L;
    ArrayList<JCheckBox> MCQOptions;
    Test TEST;
    int CurrentSection;
    int CurrentQuestion;
    int QuestionType;
    Test ANSWER;
    MediaDialog Pic;

    /** Creates new form QuestionInputFrame */
    public QuestionInputFrame()
    {
        initComponents();
        CurrentSection = 0;
        CurrentQuestion = 0;
        MCQOptions = new ArrayList<JCheckBox>(0);
        Pic = new MediaDialog(this);
    }

    public QuestionInputFrame(Test TEST)
    {
        this();
        this.TEST = TEST;
        ANSWER = new Test(TEST.Name, TEST.Course, TEST.SubName, TEST.SubCode,
                TEST.Instruction,
                TEST.DateOfTest, TEST.NoOfSections);
        ANSWER.setClassStatus(TEST.getClassStatus());
        ANSWER.setSectionStatus(TEST.getSectionStatus());
        ANSWER.setUSNStatus(TEST.getUSNStatus());
        ANSWER.setRSP(TEST.getRSP());

        for (int i = 0; i < TEST.NoOfSections; i++)
        {
            ANSWER.SectionList[i] = new Section(TEST.SectionList[i].CutOff,
                    TEST.SectionList[i].Time,
                    TEST.SectionList[i].Name, TEST.SectionList[i].SNo,
                    Section.Answer);
        }
        loadData();
        loadQuestion();
    }

    public void loadFile(Test Q, Test A)
    {
        TEST = Q;
        ANSWER = A;
        QuestionType = ((Question) TEST.SectionList[0].QAList[0]).Type;
        CurrentQuestion = 0;
        CurrentSection = 0;
        loadData();
        loadQuestion();
        if (TEST.SectionList[0].QAList.length == 1)
        {
            NextQuestion.setEnabled(false);
        }
        else if (TEST.SectionList[0].QAList.length > 1)
        {
            NextQuestion.setEnabled(true);
        }

        if (TEST.SectionList.length == 1)
        {
            NextSection.setEnabled(false);

        }
        else if (TEST.SectionList.length > 1)
        {
            NextSection.setEnabled(true);
        }
        AddQuestion.setText("Create Question");
        PreviousSection.setEnabled(false);
        PreviousQuestion.setEnabled(false);
    }

    private void clearMCQ()
    {
        MCQ.removeAll();
        MCQOptions.clear();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        QuestionTypeButtonGroup = new javax.swing.ButtonGroup();
        MCQPanel = new javax.swing.JPanel();
        MCQAddOptionButton = new javax.swing.JButton();
        MCQRemoveOptionButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        MCQ = new javax.swing.JPanel();
        FITBPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        BlankText = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        EssayPanel = new javax.swing.JPanel();
        MCQOptionsButtonGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ChoicePanel = new javax.swing.JPanel();
        MCQRadioButton = new javax.swing.JRadioButton();
        FITBRadioButton = new javax.swing.JRadioButton();
        EssayRadioButton = new javax.swing.JRadioButton();
        QuestionPanel = new javax.swing.JPanel();
        SectionNameLabel = new javax.swing.JLabel();
        SectionNoLabel = new javax.swing.JLabel();
        QuestionNoLabel = new javax.swing.JLabel();
        MarksSpinner = new javax.swing.JSpinner();
        NegMarksSpinner = new javax.swing.JSpinner();
        jScrollPane3 = new javax.swing.JScrollPane();
        FileText = new javax.swing.JTextArea();
        NextQuestion = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        QuestionTextArea = new javax.swing.JTextArea();
        NextSection = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        PreviousQuestion = new javax.swing.JButton();
        PreviousSection = new javax.swing.JButton();
        AddQuestion = new javax.swing.JButton();
        RemoveQuestion = new javax.swing.JButton();
        Media = new javax.swing.JButton();
        CopyAnsButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        OpenFile = new javax.swing.JMenuItem();
        SaveTest = new javax.swing.JMenuItem();
        Quit = new javax.swing.JMenuItem();

        MCQPanel.setName("MCQPanel"); // NOI18N

        MCQAddOptionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Icons/add.png"))); // NOI18N
        MCQAddOptionButton.setMnemonic('a');
        MCQAddOptionButton.setText("Add Option");
        MCQAddOptionButton.setName("MCQAddOptionButton"); // NOI18N
        MCQAddOptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MCQAddOptionButtonActionPerformed(evt);
            }
        });

        MCQRemoveOptionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Icons/cancel.png"))); // NOI18N
        MCQRemoveOptionButton.setMnemonic('r');
        MCQRemoveOptionButton.setText("Remove Option");
        MCQRemoveOptionButton.setName("MCQRemoveOptionButton"); // NOI18N
        MCQRemoveOptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MCQRemoveOptionButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Options", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        MCQ.setName("MCQ"); // NOI18N
        MCQ.setLayout(new java.awt.GridLayout(0, 1));
        jScrollPane1.setViewportView(MCQ);

        javax.swing.GroupLayout MCQPanelLayout = new javax.swing.GroupLayout(MCQPanel);
        MCQPanel.setLayout(MCQPanelLayout);
        MCQPanelLayout.setHorizontalGroup(
            MCQPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MCQPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MCQPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MCQAddOptionButton)
                    .addComponent(MCQRemoveOptionButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MCQPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {MCQAddOptionButton, MCQRemoveOptionButton});

        MCQPanelLayout.setVerticalGroup(
            MCQPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MCQPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MCQPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(MCQPanelLayout.createSequentialGroup()
                        .addComponent(MCQAddOptionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MCQRemoveOptionButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MCQPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {MCQAddOptionButton, MCQRemoveOptionButton});

        FITBPanel.setName("FITBPanel"); // NOI18N
        FITBPanel.setPreferredSize(new java.awt.Dimension(546, 114));

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel7.setText("Enter the text that comes in the blank : ");
        jLabel7.setName("jLabel7"); // NOI18N

        BlankText.setFont(new java.awt.Font("Dialog", 1, 12));
        BlankText.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        BlankText.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        BlankText.setName("BlankText"); // NOI18N

        jLabel8.setText("<html>Enter the Question.<font color='red'>Represent the Blank as ...... or _____</font>.<br>The question will appear in the same way. <br><br>Enter the answer below.</html>");
        jLabel8.setName("jLabel8"); // NOI18N

        javax.swing.GroupLayout FITBPanelLayout = new javax.swing.GroupLayout(FITBPanel);
        FITBPanel.setLayout(FITBPanelLayout);
        FITBPanelLayout.setHorizontalGroup(
            FITBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FITBPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FITBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FITBPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BlankText, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE))
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE))
                .addContainerGap())
        );
        FITBPanelLayout.setVerticalGroup(
            FITBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FITBPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(FITBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BlankText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(22, 22, 22))
        );

        EssayPanel.setName("EssayPanel"); // NOI18N
        EssayPanel.setPreferredSize(new java.awt.Dimension(100, 100));

        javax.swing.GroupLayout EssayPanelLayout = new javax.swing.GroupLayout(EssayPanel);
        EssayPanel.setLayout(EssayPanelLayout);
        EssayPanelLayout.setHorizontalGroup(
            EssayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        EssayPanelLayout.setVerticalGroup(
            EssayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EasyCampus Easy Test Maker - Input Questions");

        jLabel1.setText("Section Name : ");
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText("Section No : ");
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText("Question No : ");
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText("Question Type : ");
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel6.setText("Negative Marks : ");
        jLabel6.setName("jLabel6"); // NOI18N

        jLabel5.setText("Marks : ");
        jLabel5.setName("jLabel5"); // NOI18N

        ChoicePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ChoicePanel.setName("ChoicePanel"); // NOI18N
        ChoicePanel.setLayout(new java.awt.GridLayout(0, 1));

        QuestionTypeButtonGroup.add(MCQRadioButton);
        MCQRadioButton.setMnemonic('m');
        MCQRadioButton.setText("Multiple Choice");
        MCQRadioButton.setName("MCQRadioButton"); // NOI18N
        MCQRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MCQRadioButtonActionPerformed(evt);
            }
        });
        ChoicePanel.add(MCQRadioButton);

        QuestionTypeButtonGroup.add(FITBRadioButton);
        FITBRadioButton.setMnemonic('f');
        FITBRadioButton.setText("Fill in the Blanks");
        FITBRadioButton.setName("FITBRadioButton"); // NOI18N
        FITBRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FITBRadioButtonActionPerformed(evt);
            }
        });
        ChoicePanel.add(FITBRadioButton);

        QuestionTypeButtonGroup.add(EssayRadioButton);
        EssayRadioButton.setMnemonic('e');
        EssayRadioButton.setText("Essay");
        EssayRadioButton.setName("EssayRadioButton"); // NOI18N
        EssayRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EssayRadioButtonActionPerformed(evt);
            }
        });
        ChoicePanel.add(EssayRadioButton);

        QuestionPanel.setBackground(new java.awt.Color(204, 204, 204));
        QuestionPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        QuestionPanel.setName("QuestionPanel"); // NOI18N
        QuestionPanel.setLayout(new java.awt.GridLayout(1, 0));

        SectionNameLabel.setForeground(new java.awt.Color(51, 51, 255));
        SectionNameLabel.setName("SectionNameLabel"); // NOI18N

        SectionNoLabel.setForeground(new java.awt.Color(51, 51, 255));
        SectionNoLabel.setName("SectionNoLabel"); // NOI18N

        QuestionNoLabel.setForeground(new java.awt.Color(51, 51, 255));
        QuestionNoLabel.setName("QuestionNoLabel"); // NOI18N

        MarksSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        MarksSpinner.setName("MarksSpinner"); // NOI18N

        NegMarksSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        NegMarksSpinner.setName("NegMarksSpinner"); // NOI18N

        jScrollPane3.setBorder(null);
        jScrollPane3.setName("jScrollPane3"); // NOI18N

        FileText.setColumns(50);
        FileText.setFont(new java.awt.Font("Dialog", 1, 12));
        FileText.setRows(5);
        FileText.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "File Contents", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        FileText.setName("FileText"); // NOI18N
        jScrollPane3.setViewportView(FileText);

        NextQuestion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Icons/next.png"))); // NOI18N
        NextQuestion.setMnemonic('n');
        NextQuestion.setText("Next Question");
        NextQuestion.setEnabled(false);
        NextQuestion.setName("NextQuestion"); // NOI18N
        NextQuestion.setNextFocusableComponent(QuestionTextArea);
        NextQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextQuestionActionPerformed(evt);
            }
        });

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        QuestionTextArea.setColumns(20);
        QuestionTextArea.setFont(new java.awt.Font("Dialog", 1, 12));
        QuestionTextArea.setRows(5);
        QuestionTextArea.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Enter Question", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        QuestionTextArea.setName("QuestionTextArea"); // NOI18N
        QuestionTextArea.setNextFocusableComponent(QuestionPanel);
        jScrollPane2.setViewportView(QuestionTextArea);

        NextSection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Icons/next.png"))); // NOI18N
        NextSection.setMnemonic('e');
        NextSection.setText("Next Section");
        NextSection.setName("NextSection"); // NOI18N
        NextSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextSectionActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Icons/copy.png"))); // NOI18N
        jButton1.setMnemonic('c');
        jButton1.setText("Copy to Question");
        jButton1.setName("jButton1"); // NOI18N
        jButton1.setNextFocusableComponent(QuestionTextArea);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        PreviousQuestion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Icons/back.png"))); // NOI18N
        PreviousQuestion.setMnemonic('p');
        PreviousQuestion.setText("Previous Question");
        PreviousQuestion.setEnabled(false);
        PreviousQuestion.setName("PreviousQuestion"); // NOI18N
        PreviousQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreviousQuestionActionPerformed(evt);
            }
        });

        PreviousSection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Icons/back.png"))); // NOI18N
        PreviousSection.setMnemonic('r');
        PreviousSection.setText("Previous Section");
        PreviousSection.setName("PreviousSection"); // NOI18N
        PreviousSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreviousSectionActionPerformed(evt);
            }
        });

        AddQuestion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Icons/add.png"))); // NOI18N
        AddQuestion.setMnemonic('q');
        AddQuestion.setText("Create Question");
        AddQuestion.setName("AddQuestion"); // NOI18N
        AddQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddQuestionActionPerformed(evt);
            }
        });

        RemoveQuestion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Icons/remove.png"))); // NOI18N
        RemoveQuestion.setText("Remove Question");
        RemoveQuestion.setName("RemoveQuestion"); // NOI18N
        RemoveQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveQuestionActionPerformed(evt);
            }
        });

        Media.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Icons/add.png"))); // NOI18N
        Media.setMnemonic('i');
        Media.setText("Add Media");
        Media.setName("Media"); // NOI18N
        Media.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MediaActionPerformed(evt);
            }
        });

        CopyAnsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Icons/copy.png"))); // NOI18N
        CopyAnsButton.setMnemonic('c');
        CopyAnsButton.setText("Copy to Answer");
        CopyAnsButton.setName("CopyAnsButton"); // NOI18N
        CopyAnsButton.setNextFocusableComponent(QuestionTextArea);
        CopyAnsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyAnsButtonActionPerformed(evt);
            }
        });

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jMenu1.setText("File");
        jMenu1.setName("jMenu1"); // NOI18N

        OpenFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        OpenFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Icons/folder-new.png"))); // NOI18N
        OpenFile.setText("Open Text File");
        OpenFile.setName("OpenFile"); // NOI18N
        OpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFileActionPerformed(evt);
            }
        });
        jMenu1.add(OpenFile);

        SaveTest.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveTest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Icons/document-save.png"))); // NOI18N
        SaveTest.setText("Save Test");
        SaveTest.setName("SaveTest"); // NOI18N
        SaveTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveTestActionPerformed(evt);
            }
        });
        jMenu1.add(SaveTest);

        Quit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        Quit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Icons/application_exit.png"))); // NOI18N
        Quit.setText("Quit");
        Quit.setName("Quit"); // NOI18N
        Quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitActionPerformed(evt);
            }
        });
        jMenu1.add(Quit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RemoveQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PreviousQuestion)
                    .addComponent(PreviousSection, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AddQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NextQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NextSection, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                            .addComponent(QuestionPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(CopyAnsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(Media)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(811, 811, 811))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 929, Short.MAX_VALUE)
                .addGap(12, 12, 12))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SectionNoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                    .addComponent(QuestionNoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                    .addComponent(ChoicePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                    .addComponent(SectionNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(NegMarksSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MarksSpinner, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addContainerGap(631, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {AddQuestion, Media, NextQuestion, NextSection, PreviousQuestion, PreviousSection, RemoveQuestion, jButton1});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {MarksSpinner, NegMarksSpinner});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(QuestionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SectionNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SectionNoLabel)
                                .addGap(18, 18, 18)
                                .addComponent(QuestionNoLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ChoicePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(jLabel5)
                                    .addComponent(MarksSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(jLabel6)
                                    .addComponent(NegMarksSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addGap(16, 16, 16)
                                .addComponent(jLabel4)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddQuestion)
                            .addComponent(RemoveQuestion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NextQuestion)
                            .addComponent(PreviousQuestion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PreviousSection)
                            .addComponent(NextSection))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Media)
                    .addComponent(CopyAnsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {MarksSpinner, NegMarksSpinner, QuestionNoLabel, SectionNameLabel, SectionNoLabel, jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {NextSection, PreviousSection});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {NextQuestion, PreviousQuestion});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {AddQuestion, RemoveQuestion});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MCQAddOptionButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_MCQAddOptionButtonActionPerformed
    {//GEN-HEADEREND:event_MCQAddOptionButtonActionPerformed
        // TODO add your handling code here:
        String option = JOptionPane.showInputDialog(this,
                "Enter the Option Text", "Add Option",
                JOptionPane.INFORMATION_MESSAGE);

        if (option == null || option.equals(""))
        {
            return;
        }

        JCheckBox tempCheckBox = new JCheckBox(option);
        MCQOptionsButtonGroup.add(tempCheckBox);
        MCQOptions.add(tempCheckBox);
        MCQ.add(tempCheckBox);
        pack();
        repaint();
    }//GEN-LAST:event_MCQAddOptionButtonActionPerformed

    private void MCQRemoveOptionButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_MCQRemoveOptionButtonActionPerformed
    {//GEN-HEADEREND:event_MCQRemoveOptionButtonActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < MCQOptions.size(); i++)
        {
            if (MCQOptions.get(i).isSelected() == true)
            {
                MCQ.remove(MCQOptions.get(i));
                MCQOptions.remove(i);
                pack();
                repaint();
                return;
            }
        }
    }//GEN-LAST:event_MCQRemoveOptionButtonActionPerformed

    private void MCQRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_MCQRadioButtonActionPerformed
    {//GEN-HEADEREND:event_MCQRadioButtonActionPerformed
        // TODO add your handling code here:
        QuestionPanel.removeAll();
        clearMCQ();
        QuestionPanel.add(MCQPanel);
        MCQAddOptionButton.requestFocusInWindow();
        pack();
        repaint();
        QuestionType = Question.MultipleChoice;
        AddQuestion.setEnabled(true);
        CopyAnsButton.setEnabled(true);
    }//GEN-LAST:event_MCQRadioButtonActionPerformed

    private void NextQuestionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_NextQuestionActionPerformed
    {//GEN-HEADEREND:event_NextQuestionActionPerformed
        // TODO add your handling code here:
//        back = false;

        double marks = Double.parseDouble(MarksSpinner.getValue().toString());
        double negMarks = Double.parseDouble(
                NegMarksSpinner.getValue().toString());
        String questionString = QuestionTextArea.getText();
        if (questionString.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Question field cannot be blank",
                    "Error in question input", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Question Ques = new Question(marks, negMarks, questionString,
                QuestionType);
        Answer Ans = new Answer(QuestionType, marks, negMarks);

        if (QuestionType == Question.MultipleChoice)
        {
            boolean found = false;
            for (int i = 0; i < MCQOptions.size(); i++)
            {
                if (MCQOptions.get(i).isSelected() == true)
                {
                    found = true;
                    break;
                }
            }
            if (found == false)
            {
                JOptionPane.showMessageDialog(this,
                        "No option selected as answer",
                        "Error in question input", JOptionPane.ERROR_MESSAGE);
                return;
            }

            ArrayList<String> temp = new ArrayList<String>(0);
            int ans = 0;

            for (int i = 0; i < MCQOptions.size(); i++)
            {
                temp.add(MCQOptions.get(i).getText());
                if (MCQOptions.get(i).isSelected() == true)
                {
                    ans = i;
                }
            }

            String tempStrArr[] = new String[0];

            tempStrArr = temp.toArray(tempStrArr);
//            Ques.Type = QuestionType;
            Ques.MCQOptions = tempStrArr;
            Ans.setOptionAnswer(ans);
            Ques.Images =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Images;
            Ques.Audio =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Audio;
            TEST.SectionList[CurrentSection].edit(CurrentQuestion, Ques);
            ANSWER.SectionList[CurrentSection].edit(CurrentQuestion, Ans);
        }
        else if (QuestionType == Question.FillInTheBlanks)
        {
            if (BlankText.getText().equals(""))
            {
                JOptionPane.showMessageDialog(this,
                        "Answer Field cannot be blank",
                        "Error in question input", JOptionPane.ERROR_MESSAGE);
                return;
            }
//            Ques.Type = Question.FillInTheBlanks;
            Ans.setBlankAnswer(BlankText.getText());
            Ques.Images =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Images;
            Ques.Audio =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Audio;
            TEST.SectionList[CurrentSection].edit(CurrentQuestion, Ques);
            ANSWER.SectionList[CurrentSection].edit(CurrentQuestion, Ans);
        }
        else if (QuestionType == Question.Essay)
        {
//            Ques.Type = Question.Essay;
            Ques.Images =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Images;
            Ques.Audio =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Audio;
            TEST.SectionList[CurrentSection].edit(CurrentQuestion, Ques);
            ANSWER.SectionList[CurrentSection].edit(CurrentQuestion, Ans);
        }

        CurrentQuestion++;
        loadData();
        loadQuestion();
        pack();
        repaint();
        if (CurrentQuestion == TEST.SectionList[CurrentSection].QAList.length -
                1)
        {
            NextQuestion.setEnabled(false);
        }
        PreviousQuestion.setEnabled(true);
}//GEN-LAST:event_NextQuestionActionPerformed

    private void NextSectionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_NextSectionActionPerformed
    {//GEN-HEADEREND:event_NextSectionActionPerformed
        // TODO add your handling code here:

        double marks = Double.parseDouble(MarksSpinner.getValue().toString());
        double negMarks = Double.parseDouble(
                NegMarksSpinner.getValue().toString());
        String questionString = QuestionTextArea.getText();
        if (questionString.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Question field cannot be blank",
                    "Error in question input", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Question Ques = new Question(marks, negMarks, questionString,
                QuestionType);
        Answer Ans = new Answer(QuestionType, marks, negMarks);

        if (QuestionType == Question.MultipleChoice)
        {
            boolean found = false;
            for (int i = 0; i < MCQOptions.size(); i++)
            {
                if (MCQOptions.get(i).isSelected() == true)
                {
                    found = true;
                    break;
                }
            }
            if (found == false)
            {
                JOptionPane.showMessageDialog(this,
                        "No option selected as answer",
                        "Error in question input", JOptionPane.ERROR_MESSAGE);
                return;
            }

            ArrayList<String> temp = new ArrayList<String>(0);
            int ans = 0;

            for (int i = 0; i < MCQOptions.size(); i++)
            {
                temp.add(MCQOptions.get(i).getText());
                if (MCQOptions.get(i).isSelected() == true)
                {
                    ans = i;
                }
            }

            String tempStrArr[] = new String[0];

            tempStrArr = temp.toArray(tempStrArr);
//            Ques.Type = QuestionType;
            Ques.MCQOptions = tempStrArr;
            Ans.setOptionAnswer(ans);
            Ques.Images =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Images;
            Ques.Audio =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Audio;
            TEST.SectionList[CurrentSection].edit(CurrentQuestion, Ques);
            ANSWER.SectionList[CurrentSection].edit(CurrentQuestion, Ans);
        }
        else if (QuestionType == Question.FillInTheBlanks)
        {
            if (BlankText.getText().equals(""))
            {
                JOptionPane.showMessageDialog(this,
                        "Answer Field cannot be blank",
                        "Error in question input", JOptionPane.ERROR_MESSAGE);
                return;
            }
//            Ques.Type = Question.FillInTheBlanks;
            Ans.setBlankAnswer(BlankText.getText());
            Ques.Images =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Images;
            Ques.Audio =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Audio;
            TEST.SectionList[CurrentSection].edit(CurrentQuestion, Ques);
            ANSWER.SectionList[CurrentSection].edit(CurrentQuestion, Ans);
        }
        else if (QuestionType == Question.Essay)
        {
//            Ques.Type = Question.Essay;
            Ques.Images =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Images;
            Ques.Audio =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Audio;
            TEST.SectionList[CurrentSection].edit(CurrentQuestion, Ques);
            ANSWER.SectionList[CurrentSection].edit(CurrentQuestion, Ans);
        }

        CurrentQuestion = 0;
        CurrentSection++;
        if (CurrentSection <= TEST.SectionList.length - 1)
        {
            PreviousQuestion.setEnabled(false);
            NextQuestion.setEnabled(true);
            if (TEST.SectionList[CurrentSection].QAList.length == 1)
            {
                NextQuestion.setEnabled(false);
            }
            loadData();
            loadQuestion();
            if (CurrentSection == TEST.SectionList.length - 1)
            {
                NextSection.setEnabled(false);
            }
        }
//        else
//        {
//            CurrentSection--;
//            JOptionPane.showMessageDialog(null, "Finished");
//        }
        PreviousSection.setEnabled(true);
    }//GEN-LAST:event_NextSectionActionPerformed

    private void FITBRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_FITBRadioButtonActionPerformed
    {//GEN-HEADEREND:event_FITBRadioButtonActionPerformed
        // TODO add your handling code here:
        QuestionPanel.removeAll();
        QuestionTextArea.requestFocusInWindow();
        BlankText.setText("");
        QuestionPanel.add(FITBPanel);
        BlankText.requestFocusInWindow();
        pack();
        repaint();
        QuestionType = Question.FillInTheBlanks;

        AddQuestion.setEnabled(true);
        CopyAnsButton.setEnabled(true);
    }//GEN-LAST:event_FITBRadioButtonActionPerformed

    private void EssayRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_EssayRadioButtonActionPerformed
    {//GEN-HEADEREND:event_EssayRadioButtonActionPerformed
        // TODO add your handling code here:
        QuestionPanel.removeAll();
        QuestionTextArea.requestFocusInWindow();
        QuestionType = Question.Essay;
        pack();
        repaint();

        AddQuestion.setEnabled(true);
        CopyAnsButton.setEnabled(false);
    }//GEN-LAST:event_EssayRadioButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String str = FileText.getSelectedText();
        if (str != null && str.equals("") != true)
        {
            QuestionTextArea.setText(QuestionTextArea.getText() + str);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void PreviousQuestionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_PreviousQuestionActionPerformed
    {//GEN-HEADEREND:event_PreviousQuestionActionPerformed
        // TODO add your handling code here:

        double marks = Double.parseDouble(MarksSpinner.getValue().toString());
        double negMarks = Double.parseDouble(
                NegMarksSpinner.getValue().toString());
        String questionString = QuestionTextArea.getText();
        if (questionString.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Question field cannot be blank",
                    "Error in question input", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Question Ques = new Question(marks, negMarks, questionString,
                QuestionType);
        Answer Ans = new Answer(QuestionType, marks, negMarks);

        if (QuestionType == Question.MultipleChoice)
        {
            boolean found = false;
            for (int i = 0; i < MCQOptions.size(); i++)
            {
                if (MCQOptions.get(i).isSelected() == true)
                {
                    found = true;
                    break;
                }
            }
            if (found == false)
            {
                JOptionPane.showMessageDialog(this,
                        "No option selected as answer",
                        "Error in question input", JOptionPane.ERROR_MESSAGE);
                return;
            }

            ArrayList<String> temp = new ArrayList<String>(0);
            int ans = 0;

            for (int i = 0; i < MCQOptions.size(); i++)
            {
                temp.add(MCQOptions.get(i).getText());
                if (MCQOptions.get(i).isSelected() == true)
                {
                    ans = i;
                }
            }

            String tempStrArr[] = new String[0];

            tempStrArr = temp.toArray(tempStrArr);
//            Ques.Type = QuestionType;
            Ques.MCQOptions = tempStrArr;
            Ans.setOptionAnswer(ans);
            Ques.Images =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Images;
            Ques.Audio =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Audio;
            TEST.SectionList[CurrentSection].edit(CurrentQuestion, Ques);
            ANSWER.SectionList[CurrentSection].edit(CurrentQuestion, Ans);
        }
        else if (QuestionType == Question.FillInTheBlanks)
        {
            if (BlankText.getText().equals(""))
            {
                JOptionPane.showMessageDialog(this,
                        "Answer Field cannot be blank",
                        "Error in question input", JOptionPane.ERROR_MESSAGE);
                return;
            }
//            Ques.Type = Question.FillInTheBlanks;
            Ans.setBlankAnswer(BlankText.getText());
            Ques.Images =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Images;
            TEST.SectionList[CurrentSection].edit(CurrentQuestion, Ques);
            ANSWER.SectionList[CurrentSection].edit(CurrentQuestion, Ans);
        }
        else if (QuestionType == Question.Essay)
        {
//            Ques.Type = Question.Essay;
            Ques.Images =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Images;
            TEST.SectionList[CurrentSection].edit(CurrentQuestion, Ques);
            TEST.SectionList[CurrentSection].edit(CurrentQuestion, Ques);
            ANSWER.SectionList[CurrentSection].edit(CurrentQuestion, Ans);
        }

        CurrentQuestion--;
        clear();
        loadData();
        loadQuestion();
        pack();
        repaint();

        if (CurrentQuestion == 0)
        {
            PreviousQuestion.setEnabled(false);
        }
        NextQuestion.setEnabled(true);
        System.out.println("CurrentQuestion = " + CurrentQuestion +
                " QAList.length = " +
                TEST.SectionList[CurrentSection].QAList.length);
}//GEN-LAST:event_PreviousQuestionActionPerformed

    private void AddQuestionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AddQuestionActionPerformed
    {//GEN-HEADEREND:event_AddQuestionActionPerformed
        // TODO add your handling code here:
        if (AddQuestion.getText().equals("Create Question"))
        {
            clear();
            QuestionTextArea.requestFocusInWindow();
            AddQuestion.setText("Save Question");
            QuestionNoLabel.setText("---");
            NextQuestion.setEnabled(false);
            PreviousQuestion.setEnabled(false);
            NextSection.setEnabled(false);
            PreviousSection.setEnabled(false);
            QuestionTypeButtonGroup.clearSelection();
            Media.setEnabled(false);
            SaveTest.setEnabled(false);
            RemoveQuestion.setEnabled(false);
            AddQuestion.setEnabled(false);
            CopyAnsButton.setEnabled(false);
        }
        else
        {
            double marks =
                    Double.parseDouble(MarksSpinner.getValue().toString());
            double negMarks = Double.parseDouble(NegMarksSpinner.getValue().
                    toString());
            String questionString = QuestionTextArea.getText();
            if (questionString.equals(""))
            {
                JOptionPane.showMessageDialog(this,
                        "Question field cannot be blank",
                        "Error in question input", JOptionPane.ERROR_MESSAGE);
                return;
            }
            Question Ques = new Question(marks, negMarks, questionString,
                    QuestionType);
            Answer Ans = new Answer(QuestionType, marks, negMarks);

            if (QuestionType == Question.MultipleChoice)
            {
                boolean found = false;
                for (int i = 0; i < MCQOptions.size(); i++)
                {
                    if (MCQOptions.get(i).isSelected() == true)
                    {
                        found = true;
                        break;
                    }
                }
                if (found == false)
                {
                    JOptionPane.showMessageDialog(this,
                            "No option selected as answer",
                            "Error in question input", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                ArrayList<String> temp = new ArrayList<String>(0);
                int ans = 0;

                for (int i = 0; i < MCQOptions.size(); i++)
                {
                    temp.add(MCQOptions.get(i).getText());
                    if (MCQOptions.get(i).isSelected() == true)
                    {
                        ans = i;
                    }
                }

                String tempStrArr[] = new String[0];

                tempStrArr = temp.toArray(tempStrArr);
//                Ques.Type = QuestionType;
                Ques.MCQOptions = tempStrArr;
                Ans.setOptionAnswer(ans);
                TEST.SectionList[CurrentSection].add(Ques);
                ANSWER.SectionList[CurrentSection].add(Ans);
            }
            else if (QuestionType == Question.FillInTheBlanks)
            {
                if (BlankText.getText().equals(""))
                {
                    JOptionPane.showMessageDialog(this,
                            "Answer Field cannot be blank",
                            "Error in question input", JOptionPane.ERROR_MESSAGE);
                    return;
                }
//                Ques.Type = Question.FillInTheBlanks;
                Ans.setBlankAnswer(BlankText.getText());
                TEST.SectionList[CurrentSection].add(Ques);
                ANSWER.SectionList[CurrentSection].add(Ans);
            }
            else if (QuestionType == Question.Essay)
            {
//                Ques.Type = Question.Essay;
                TEST.SectionList[CurrentSection].add(Ques);
                ANSWER.SectionList[CurrentSection].add(Ans);
            }
            CurrentQuestion = TEST.SectionList[CurrentSection].QAList.length - 1;
            AddQuestion.setText("Create Question");
            if (TEST.SectionList[CurrentSection].QAList.length != 1)
            {
                PreviousQuestion.setEnabled(true);
            }
            if (CurrentSection != TEST.SectionList.length - 1)
            {
                NextSection.setEnabled(true);
            }
            if (CurrentSection != 0)
            {
                PreviousSection.setEnabled(true);
            }
            SaveTest.setEnabled(true);
            Media.setEnabled(true);
            RemoveQuestion.setEnabled(true);
            loadData();
            loadQuestion();
        }
        repaint();
    }//GEN-LAST:event_AddQuestionActionPerformed

    private void PreviousSectionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_PreviousSectionActionPerformed
    {//GEN-HEADEREND:event_PreviousSectionActionPerformed
        // TODO add your handling code here:
        double marks = Double.parseDouble(MarksSpinner.getValue().toString());
        double negMarks = Double.parseDouble(
                NegMarksSpinner.getValue().toString());
        String questionString = QuestionTextArea.getText();
        if (questionString.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Question field cannot be blank",
                    "Error in question input", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Question Ques = new Question(marks, negMarks, questionString,
                QuestionType);
        Answer Ans = new Answer(QuestionType, marks, negMarks);

        if (QuestionType == Question.MultipleChoice)
        {
            boolean found = false;
            for (int i = 0; i < MCQOptions.size(); i++)
            {
                if (MCQOptions.get(i).isSelected() == true)
                {
                    found = true;
                    break;
                }
            }
            if (found == false)
            {
                JOptionPane.showMessageDialog(this,
                        "No option selected as answer",
                        "Error in question input", JOptionPane.ERROR_MESSAGE);
                return;
            }

            ArrayList<String> temp = new ArrayList<String>(0);
            int ans = 0;

            for (int i = 0; i < MCQOptions.size(); i++)
            {
                temp.add(MCQOptions.get(i).getText());
                if (MCQOptions.get(i).isSelected() == true)
                {
                    ans = i;
                }
            }

            String tempStrArr[] = new String[0];

            tempStrArr = temp.toArray(tempStrArr);
//            Ques.Type = QuestionType;
            Ques.MCQOptions = tempStrArr;
            Ques.Images =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Images;
            Ques.Audio =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Audio;
            Ans.setOptionAnswer(ans);
            TEST.SectionList[CurrentSection].edit(CurrentQuestion, Ques);
            ANSWER.SectionList[CurrentSection].edit(CurrentQuestion, Ans);
        }
        else if (QuestionType == Question.FillInTheBlanks)
        {
            if (BlankText.getText().equals(""))
            {
                JOptionPane.showMessageDialog(this,
                        "Answer Field cannot be blank",
                        "Error in question input", JOptionPane.ERROR_MESSAGE);
                return;
            }
//            Ques.Type = Question.FillInTheBlanks;
            Ans.setBlankAnswer(BlankText.getText());
            Ques.Images =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Images;
            TEST.SectionList[CurrentSection].edit(CurrentQuestion, Ques);
            ANSWER.SectionList[CurrentSection].edit(CurrentQuestion, Ans);
        }
        else if (QuestionType == Question.Essay)
        {
//            Ques.Type = Question.Essay;
            Ques.Images =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Images;
            TEST.SectionList[CurrentSection].edit(CurrentQuestion, Ques);
            ANSWER.SectionList[CurrentSection].edit(CurrentQuestion, Ans);
        }

        CurrentSection--;
        if (CurrentSection == 0)
        {
            PreviousSection.setEnabled(false);
        }
        CurrentQuestion = 0;

        PreviousQuestion.setEnabled(false);
        NextQuestion.setEnabled(true);
        loadData();
        loadQuestion();
        if (TEST.SectionList[CurrentSection].QAList.length == 1)
        {
            NextQuestion.setEnabled(false);
        }
        NextSection.setEnabled(true);
}//GEN-LAST:event_PreviousSectionActionPerformed

    private void RemoveQuestionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_RemoveQuestionActionPerformed
    {//GEN-HEADEREND:event_RemoveQuestionActionPerformed
        // TODO add your handling code here:
        PreviousQuestion.setEnabled(false);
        NextQuestion.setEnabled(false);
        TEST.SectionList[CurrentSection].remove(CurrentQuestion);
        if (CurrentQuestion > TEST.SectionList[CurrentSection].QAList.length - 1)
        {
            CurrentQuestion = TEST.SectionList[CurrentSection].QAList.length - 1;
        }
        if (TEST.SectionList[CurrentSection].QAList.length == 1)
        {
            CurrentQuestion = 0;
            loadData();
            loadQuestion();
            return;
        }
        if (TEST.SectionList[CurrentSection].QAList.length == 0)
        {
            AddQuestion.setText("Create Question");
            AddQuestionActionPerformed(evt);
            return;
        }
        if (CurrentQuestion > 0)
        {
            CurrentQuestion--;
        }
        if (CurrentQuestion >= 0 && CurrentQuestion <
                TEST.SectionList[CurrentSection].QAList.length)
        {
            NextQuestion.setEnabled(true);
            if (CurrentQuestion > 0)
            {
                PreviousQuestion.setEnabled(true);
            }
        }
        if (CurrentQuestion >= TEST.SectionList[CurrentSection].QAList.length)
        {
            CurrentQuestion = TEST.SectionList[CurrentSection].QAList.length;
            PreviousQuestion.setEnabled(true);
        }
        loadData();
        loadQuestion();
    }//GEN-LAST:event_RemoveQuestionActionPerformed

    private void OpenFileActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_OpenFileActionPerformed
    {//GEN-HEADEREND:event_OpenFileActionPerformed
        // TODO add your handling code here:
        JFileChooser ob = new JFileChooser();
        ob.addChoosableFileFilter(new FileNameExtensionFilter("Text Files",
                "txt"));

        if (ob.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            File file = ob.getSelectedFile();
            try
            {
                DataInputStream ob2 = new DataInputStream(new FileInputStream(
                        file));
                BufferedReader in = new BufferedReader(
                        new InputStreamReader(ob2));
                String line = "";
                FileText.setText("");
                while ((line = in.readLine()) != null)
                {
                    FileText.append(line + "\n");
                }
            } catch (FileNotFoundException ex)
            {
                Logger.getLogger(QuestionInputFrame.class.getName()).log(
                        Level.SEVERE, null, ex);
            } catch (IOException ex)
            {
                Logger.getLogger(QuestionInputFrame.class.getName()).log(
                        Level.SEVERE, null, ex);
            }
        }
}//GEN-LAST:event_OpenFileActionPerformed

    private void SaveTestActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_SaveTestActionPerformed
    {//GEN-HEADEREND:event_SaveTestActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < TEST.SectionList.length; i++)
        {
            if (TEST.SectionList[i].QAList.length == 0)
            {
                JOptionPane.showMessageDialog(QuestionPanel, "Section " +
                        (i + 1) +
                        " has no Questions.", "Section is empty!!!",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
        }


        File Dir = Question.Dir;


        if (Dir.exists())
        {
            if (JOptionPane.showConfirmDialog(this, "Overwrite Directory?",
                    "Directory Exists!",
                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE) ==
                    JOptionPane.CANCEL_OPTION)
            {
                return;
            }
        }
        else
        {
            if (Dir.mkdir() == false)
            {
                JOptionPane.showMessageDialog(this, "Failed to create Directory",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }





        double marks = Double.parseDouble(MarksSpinner.getValue().toString());
        double negMarks = Double.parseDouble(
                NegMarksSpinner.getValue().toString());
        String questionString = QuestionTextArea.getText();
        if (questionString.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Question field cannot be blank",
                    "Error in question input", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Question Ques = new Question(marks, negMarks, questionString,
                QuestionType);
        Answer Ans = new Answer(QuestionType, marks, negMarks);

        if (QuestionType == Question.MultipleChoice)
        {
            boolean found = false;
            for (int i = 0; i < MCQOptions.size(); i++)
            {
                if (MCQOptions.get(i).isSelected() == true)
                {
                    found = true;
                    break;
                }
            }
            if (found == false)
            {
                JOptionPane.showMessageDialog(this,
                        "No option selected as answer",
                        "Error in question input", JOptionPane.ERROR_MESSAGE);
                return;
            }

            ArrayList<String> temp = new ArrayList<String>(0);
            int ans = 0;

            for (int i = 0; i < MCQOptions.size(); i++)
            {
                temp.add(MCQOptions.get(i).getText());
                if (MCQOptions.get(i).isSelected() == true)
                {
                    ans = i;
                }
            }

            String tempStrArr[] = new String[0];

            tempStrArr = temp.toArray(tempStrArr);
//            Ques.Type = QuestionType;
            Ques.MCQOptions = tempStrArr;
            Ans.setOptionAnswer(ans);
            Ques.Images =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Images;
            Ques.Audio =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Audio;
            TEST.SectionList[CurrentSection].edit(CurrentQuestion, Ques);
            ANSWER.SectionList[CurrentSection].edit(CurrentQuestion, Ans);
        }
        else if (QuestionType == Question.FillInTheBlanks)
        {
            if (BlankText.getText().equals(""))
            {
                JOptionPane.showMessageDialog(this,
                        "Answer Field cannot be blank",
                        "Error in question input", JOptionPane.ERROR_MESSAGE);
                return;
            }
//            Ques.Type = Question.FillInTheBlanks;
            Ans.setBlankAnswer(BlankText.getText());
            Ques.Images =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Images;
            Ques.Audio =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Audio;
            TEST.SectionList[CurrentSection].edit(CurrentQuestion, Ques);
            ANSWER.SectionList[CurrentSection].edit(CurrentQuestion, Ans);
        }
        else if (QuestionType == Question.Essay)
        {
//            Ques.Type = Question.Essay;
            Ques.Images =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Images;
            Ques.Audio =
                    ((Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]).Audio;
            TEST.SectionList[CurrentSection].edit(CurrentQuestion, Ques);
            ANSWER.SectionList[CurrentSection].edit(CurrentQuestion, Ans);
        }





        File questionFile = new File(Dir, TEST.Name + ".q");
        File answerFile = new File(Dir, TEST.Name + ".a");
        try
        {
            ObjectOutputStream outQuestion = new ObjectOutputStream(new FileOutputStream(
                    questionFile));
            ObjectOutputStream outAnswer = new ObjectOutputStream(
                    new FileOutputStream(answerFile));

            outQuestion.writeObject(TEST);
            outAnswer.writeObject(ANSWER);
        } catch (IOException ex)
        {
            Logger.getLogger(QuestionInputFrame.class.getName()).log(
                    Level.SEVERE, null, ex);
        }


//        Deleting unused media files

        if (JOptionPane.showConfirmDialog(null, "There may be unused media files in " + Question.Dir +
                ".Should they be deleted?", "Delete all unused media files?",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE) ==
                JOptionPane.CANCEL_OPTION)
        {
            return;
        }

        File Parent = Question.Dir;
        FileFilter filter = new FileFilter()
        {

            public boolean accept(File arg0)
            {
                if (arg0.isDirectory())
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
        };
        File list[] = Parent.listFiles(filter);
        for (int i = 0; i < list.length; i++)
        {
            File child = list[i];
            if (child.getName().endsWith(".q") || child.getName().endsWith(".a") || child.getName().
                    endsWith(".rsp"))
            {
                continue;
            }

            boolean flag = false;

            for (int j = 0; j < TEST.NoOfSections; j++)
            {
                for (int k = 0; k < TEST.SectionList[j].QAList.length; k++)
                {
                    for (int l = 0;
                            l <
                            ((Question) TEST.SectionList[j].QAList[k]).Images.length;
                            l++)
                    {
                        if (((Question) TEST.SectionList[j].QAList[k]).Images[l].equals(
                                child.getName()))
                        {
                            flag = true;
                            break;
                        }
                    }

                    for (int l = 0;
                            l <
                            ((Question) TEST.SectionList[j].QAList[k]).Audio.length;
                            l++)
                    {
                        if (((Question) TEST.SectionList[j].QAList[k]).Audio[l].equals(
                                child.getName()))
                        {
                            flag = true;
                            break;
                        }
                    }
                }
            }

            if (flag == false)
            {
                child.delete();
            }
        }

}//GEN-LAST:event_SaveTestActionPerformed

    private void QuitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_QuitActionPerformed
    {//GEN-HEADEREND:event_QuitActionPerformed
        // TODO add your handling code here:
        this.dispose();
}//GEN-LAST:event_QuitActionPerformed

    private void MediaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_MediaActionPerformed
    {//GEN-HEADEREND:event_MediaActionPerformed
        // TODO add your handling code here:
        Pic.setQUESTION(
                (Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion]);
        Pic.setVisible(true);
    }//GEN-LAST:event_MediaActionPerformed

    private void CopyAnsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CopyAnsButtonActionPerformed
    {//GEN-HEADEREND:event_CopyAnsButtonActionPerformed
        // TODO add your handling code here:
        if (QuestionType == Question.MultipleChoice)
        {
            String option = FileText.getSelectedText();
            JCheckBox tempCheckBox = new JCheckBox(option);
            MCQOptionsButtonGroup.add(tempCheckBox);
            MCQOptions.add(tempCheckBox);
            MCQ.add(tempCheckBox);
            pack();
            repaint();
        }
        else if (QuestionType == Question.FillInTheBlanks)
        {
            String option = FileText.getSelectedText();
            BlankText.setText(option);
        }
}//GEN-LAST:event_CopyAnsButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {
                new QuestionInputFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddQuestion;
    private javax.swing.JTextField BlankText;
    private javax.swing.JPanel ChoicePanel;
    private javax.swing.JButton CopyAnsButton;
    private javax.swing.JPanel EssayPanel;
    private javax.swing.JRadioButton EssayRadioButton;
    private javax.swing.JPanel FITBPanel;
    private javax.swing.JRadioButton FITBRadioButton;
    private javax.swing.JTextArea FileText;
    private javax.swing.JPanel MCQ;
    private javax.swing.JButton MCQAddOptionButton;
    private javax.swing.ButtonGroup MCQOptionsButtonGroup;
    private javax.swing.JPanel MCQPanel;
    private javax.swing.JRadioButton MCQRadioButton;
    private javax.swing.JButton MCQRemoveOptionButton;
    private javax.swing.JSpinner MarksSpinner;
    private javax.swing.JButton Media;
    private javax.swing.JSpinner NegMarksSpinner;
    private javax.swing.JButton NextQuestion;
    private javax.swing.JButton NextSection;
    private javax.swing.JMenuItem OpenFile;
    private javax.swing.JButton PreviousQuestion;
    private javax.swing.JButton PreviousSection;
    private javax.swing.JLabel QuestionNoLabel;
    private javax.swing.JPanel QuestionPanel;
    private javax.swing.JTextArea QuestionTextArea;
    private javax.swing.ButtonGroup QuestionTypeButtonGroup;
    private javax.swing.JMenuItem Quit;
    private javax.swing.JButton RemoveQuestion;
    private javax.swing.JMenuItem SaveTest;
    private javax.swing.JLabel SectionNameLabel;
    private javax.swing.JLabel SectionNoLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

    private void loadData()
    {
        SectionNameLabel.setText(TEST.SectionList[CurrentSection].Name);
        SectionNoLabel.setText(Integer.toString(TEST.SectionList[CurrentSection].SNo +
                1));

        QuestionNoLabel.setText(Integer.toString(CurrentQuestion + 1) + "/" +
                TEST.SectionList[CurrentSection].QAList.length);
        repaint();
    }

    public void clear()
    {
        QuestionTextArea.setText("");
        QuestionPanel.removeAll();
        MCQOptions.clear();
        MCQ.removeAll();
        BlankText.setText("");
        pack();
        repaint();
    }

    private void loadQuestion()
    {
        if (TEST.SectionList[CurrentSection].QAList.length == 0)
        {
            AddQuestion.setText("Create Question");
            AddQuestionActionPerformed(new ActionEvent(this, Event.ACTION_EVENT,
                    ""));
            return;
        }
        QuestionAnswer qa =
                (Question) TEST.SectionList[CurrentSection].QAList[CurrentQuestion];
        QuestionPanel.removeAll();
        Question ques = (Question) qa;
        Answer ans =
                (Answer) ANSWER.SectionList[CurrentSection].QAList[CurrentQuestion];
        QuestionTextArea.setText(ques.QuestionString);
        if (ques.Type == Question.MultipleChoice)
        {
            QuestionType = Question.MultipleChoice;
            MCQRadioButton.setSelected(true);
            String[] options = ques.MCQOptions;
            clearMCQ();
            for (int i = 0; i < options.length; i++)
            {
                JCheckBox ch = new JCheckBox(options[i]);
                MCQOptions.add(ch);
                MCQ.add(ch);
                MCQOptionsButtonGroup.add(ch);
            }
            MCQOptions.get(ans.getOptionAnswer()).setSelected(true);
            QuestionPanel.add(MCQPanel);
        }
        else if (ques.Type == Question.FillInTheBlanks)
        {
            QuestionType = Question.FillInTheBlanks;
            FITBRadioButton.setSelected(true);
            BlankText.setText(ans.getBlankAnswer());
            QuestionPanel.add(FITBPanel);
        }
        else if (ques.Type == Question.Essay)
        {
            QuestionType = Question.Essay;
            EssayRadioButton.setSelected(true);
            QuestionPanel.add(EssayPanel);
        }
//        else
//        {
//            JOptionPane.showMessageDialog(null, "none");
//        }
//        loadData();
        MarksSpinner.setValue(ques.Marks);
        NegMarksSpinner.setValue(ques.NegMarks);
        pack();
        repaint();
    }
}
