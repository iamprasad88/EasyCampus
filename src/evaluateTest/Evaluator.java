/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Evaluator.java
 *
 * Created on May 19, 2009, 2:09:40 AM
 */
package evaluateTest;

import helper.Answer;
import helper.Question;
import helper.Report;
import helper.Test;
import java.util.ArrayList;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author prasad
 */
public class Evaluator extends javax.swing.JDialog
{

    int CurrentQuestion = 0;
    int CurrentSection = 0;
    int CurrentAnswer = 0;
    Test QObject;
    Test AObject;
    Test RObject;
    int FirstEQuestion = 0;
    int FirstESection = 0;
    ArrayList<Question> EssayQuestions;
    ArrayList<Answer> EssayAnswers;
    ArrayList<Double> Given;
    double MarksSoFar = 0.0;
    int CheckedSoFar;
    double Total = 0.0d;
    private ArrayList<Integer> SectionNo;
    private ArrayList<Integer> QNo;
    private Report RPT;

    /** Creates new form Evaluator */
    public Evaluator(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        initComponents();

//        QObject = Q;
//        AObject = A;
//        RObject = R;
        EssayQuestions = new ArrayList<Question>(0);
        EssayAnswers = new ArrayList<Answer>(0);
        Given = new ArrayList<Double>(0);
        SectionNo = new ArrayList<Integer>(0);
        QNo = new ArrayList<Integer>(0);
        NextButton.setEnabled(false);


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        QuestionField = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        AnswerField = new javax.swing.JTextArea();
        CancelButton = new javax.swing.JButton();
        NextButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        MarksSpinner = new javax.swing.JSpinner();
        MarksSoFarLabel = new javax.swing.JLabel();
        TotalMarksLabel = new javax.swing.JLabel();
        NMarksLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Essay Question", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel1.setName("jPanel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        QuestionField.setColumns(20);
        QuestionField.setEditable(false);
        QuestionField.setRows(5);
        QuestionField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        QuestionField.setName("QuestionField"); // NOI18N
        jScrollPane1.setViewportView(QuestionField);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        AnswerField.setColumns(20);
        AnswerField.setEditable(false);
        AnswerField.setRows(5);
        AnswerField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        AnswerField.setName("AnswerField"); // NOI18N
        jScrollPane2.setViewportView(AnswerField);

        CancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Icons/accept.png"))); // NOI18N
        CancelButton.setText("Finished");
        CancelButton.setName("CancelButton"); // NOI18N
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        NextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Icons/next.png"))); // NOI18N
        NextButton.setText("Next");
        NextButton.setName("NextButton"); // NOI18N
        NextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextButtonActionPerformed(evt);
            }
        });

        BackButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Icons/back.png"))); // NOI18N
        BackButton.setText("Back");
        BackButton.setName("BackButton"); // NOI18N
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Marks");
        jLabel2.setName("jLabel2"); // NOI18N

        MarksSpinner.setName("MarksSpinner"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(709, 709, 709)
                        .addComponent(CancelButton))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 820, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 820, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(MarksSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap(455, Short.MAX_VALUE)
                            .addComponent(BackButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(NextButton)
                            .addGap(127, 127, 127))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {BackButton, CancelButton, NextButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(MarksSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NextButton)
                    .addComponent(BackButton)))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {BackButton, NextButton});

        MarksSoFarLabel.setName("MarksSoFarLabel"); // NOI18N

        TotalMarksLabel.setName("TotalMarksLabel"); // NOI18N

        NMarksLabel.setName("NMarksLabel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NMarksLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TotalMarksLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MarksSoFarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(638, 638, 638))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {MarksSoFarLabel, NMarksLabel, TotalMarksLabel});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MarksSoFarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NMarksLabel)
                .addGap(8, 8, 8)
                .addComponent(TotalMarksLabel)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {MarksSoFarLabel, NMarksLabel, TotalMarksLabel});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CancelButtonActionPerformed
    {//GEN-HEADEREND:event_CancelButtonActionPerformed
        // TODO add your handling code here:
        if (EssayQuestions.size() > 0)
        {
            double givenNow = Double.parseDouble(MarksSpinner.getValue().
                    toString());
            double givenEarlier = Given.get(CheckedSoFar);
            MarksSoFar = MarksSoFar - givenEarlier + givenNow;
            RPT.QM[SectionNo.get(CheckedSoFar)][QNo.get(CheckedSoFar)] =
                    givenNow;
            Given.remove(CheckedSoFar);
            Given.add(CheckedSoFar, givenNow);
        }
        RPT.process();
        this.dispose();
}//GEN-LAST:event_CancelButtonActionPerformed

    private void NextButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_NextButtonActionPerformed
    {//GEN-HEADEREND:event_NextButtonActionPerformed
        // TODO add your handling code here:
        double givenNow = Double.parseDouble(MarksSpinner.getValue().toString());
        double givenEarlier = Given.get(CheckedSoFar);
        MarksSoFar = MarksSoFar - givenEarlier + givenNow;
        RPT.QM[SectionNo.get(CheckedSoFar)][QNo.get(CheckedSoFar)] = givenNow;
        Given.remove(CheckedSoFar);
        Given.add(CheckedSoFar, givenNow);
        CheckedSoFar++;
        if (CheckedSoFar == EssayQuestions.size() - 1)
        {
            NextButton.setEnabled(false);
            CancelButton.setEnabled(true);
        }
        BackButton.setEnabled(true);

        loadQuestion();
}//GEN-LAST:event_NextButtonActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BackButtonActionPerformed
    {//GEN-HEADEREND:event_BackButtonActionPerformed
        // TODO add your handling code here:
        double givenNow = Double.parseDouble(MarksSpinner.getValue().toString());
        double givenEarlier = Given.get(CheckedSoFar);
        MarksSoFar = MarksSoFar - givenEarlier + givenNow;
        RPT.QM[SectionNo.get(CheckedSoFar)][QNo.get(CheckedSoFar)] = givenNow;
        Given.remove(CheckedSoFar);
        Given.add(CheckedSoFar, givenNow);
        CheckedSoFar--;
        if (CheckedSoFar == 0)
        {
            BackButton.setEnabled(false);
        }
        NextButton.setEnabled(true);
        loadQuestion();
}//GEN-LAST:event_BackButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {
                Evaluator dialog = new Evaluator(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter()
                {

                    public void windowClosing(java.awt.event.WindowEvent e)
                    {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AnswerField;
    private javax.swing.JButton BackButton;
    private javax.swing.JButton CancelButton;
    private javax.swing.JLabel MarksSoFarLabel;
    private javax.swing.JSpinner MarksSpinner;
    private javax.swing.JLabel NMarksLabel;
    private javax.swing.JButton NextButton;
    private javax.swing.JTextArea QuestionField;
    private javax.swing.JLabel TotalMarksLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    public void loadQuestion()
    {
        Question Ques = EssayQuestions.get(CheckedSoFar);
        Answer Ans = EssayAnswers.get(CheckedSoFar);
        double marksGiven = Given.get(CheckedSoFar);
        MarksSpinner.setModel(new SpinnerNumberModel(marksGiven, -Ques.NegMarks,
                Ques.Marks, 0.5d));
        MarksSoFarLabel.setText("Marks So Far : " + MarksSoFar);
        TotalMarksLabel.setText("Total Marks : " + Total);
        NMarksLabel.setText("Negative Marks : " + Ques.NegMarks);
        QuestionField.setText(Ques.QuestionString);
        AnswerField.setText(Ans.getEssayAnswer());
        if (EssayQuestions.size() > 0 && CheckedSoFar < EssayQuestions.size() -
                1)
        {
            NextButton.setEnabled(true);
        }

    }

    public double evaluate(Test A, Test R)
    {
        double total = 0.0d;
        for (int i = 0; i < A.NoOfSections; i++)
        {
            for (int j = 0; j < A.SectionList[i].QAList.length; j++)
            {

                Answer Ref, Cur;
                Ref = (Answer) A.SectionList[i].QAList[j];
                Cur = (Answer) R.SectionList[i].QAList[j];

//                total += Ref.Marks;
                if (Ref.Type == Question.Essay)
                {
                    continue;
                }
                else if (Ref.Type == Question.MultipleChoice)
                {
                    if (Cur.getOptionAnswer() == -1)
                    {
                        RPT.QM[i][j] = 0;
                    }
                    if (Ref.getOptionAnswer() == Cur.getOptionAnswer())
                    {
                        total += Ref.Marks;
                        RPT.QM[i][j] = Ref.Marks;
                    }
                    else
                    {
                        total -= Ref.NegMarks;
                        RPT.QM[i][j] = -Ref.NegMarks;
                    }
                }
                else if (Ref.Type == Question.FillInTheBlanks)
                {
                    if (Ref.getBlankAnswer().compareToIgnoreCase(Cur.
                            getBlankAnswer()) == 0)
                    {
                        total += Ref.Marks;
                        RPT.QM[i][j] = Ref.Marks;
                    }
                    else
                    {
                        total -= Ref.NegMarks;
                        RPT.QM[i][j] = -Ref.NegMarks;
                    }
                }
            }

        }

        return total;
    }

    public void evaluate(Test Q, Test A, Test R)
    {
        QObject = Q;
        AObject = A;
        RObject = R;
        EssayQuestions.clear();
        EssayAnswers.clear();
        Given.clear();
        SectionNo.clear();
        QNo.clear();
        CancelButton.setEnabled(false);
        setTitle(R.UserName);

        CurrentQuestion = 0;
        CurrentSection = 0;
        CurrentAnswer = 0;
        FirstEQuestion = 0;
        FirstESection = 0;
        MarksSoFar = 0.0;
        CheckedSoFar = 0;
        Total = 0.0d;

        for (int i = 0; i < Q.SectionList.length; i++)
        {
            for (int j = 0; j < Q.SectionList[i].QAList.length; j++)
            {
                if (((Question) Q.SectionList[i].QAList[j]).Type ==
                        Question.Essay)
                {
                    EssayQuestions.add((Question) Q.SectionList[i].QAList[j]);
                    EssayAnswers.add((Answer) R.SectionList[i].QAList[j]);
                    Given.add(0.0);
                    SectionNo.add(i);
                    QNo.add(j);
                }
            }
        }

        RPT = new Report(QObject, RObject);

        MarksSoFar = evaluate(A, R);
        BackButton.setEnabled(false);
        if (EssayQuestions.size() == 1)
        {
            NextButton.setEnabled(false);
        }
        if (EssayQuestions.size() > 0)
        {
            loadQuestion();
        }
        this.setVisible(true);
    }

    public Report getReport()
    {
//        RPT.process();
        return RPT;
    }
}
