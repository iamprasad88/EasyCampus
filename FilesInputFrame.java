/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FilesInputFrame.java
 *
 * Created on May 16, 2009, 12:56:19 PM
 */
package evaluateTest;

import helper.DirFilter;
import helper.Question;
import helper.Report;
import helper.Test;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.Formatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import start.MainFrame;

/**
 *
 * @author pani
 */
public class FilesInputFrame extends javax.swing.JFrame
{

    Evaluator Eval;

    /** Creates new form FilesInputFrame */
    public FilesInputFrame()
    {
        initComponents();
        AFileButton.setEnabled(false);
        RFileButton.setEnabled(false);

        Eval = new Evaluator(this, true);
    }
    File Qfile;
    File AFile;
    File RFile;
    Test Q;
    Test A;
    Test R;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        QFileButton = new javax.swing.JButton();
        AFileButton = new javax.swing.JButton();
        RFileButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        QFileButton.setText("Select Question File");
        QFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QFileButtonActionPerformed(evt);
            }
        });

        AFileButton.setText("Select Answer File");
        AFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AFileButtonActionPerformed(evt);
            }
        });

        RFileButton.setText("Select Response File/Folder");
        RFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RFileButtonActionPerformed(evt);
            }
        });

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(RFileButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AFileButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(QFileButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(CancelButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {AFileButton, QFileButton, RFileButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(QFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(CancelButton)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {AFileButton, QFileButton, RFileButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CancelButtonActionPerformed
    {//GEN-HEADEREND:event_CancelButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void QFileButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_QFileButtonActionPerformed
    {//GEN-HEADEREND:event_QFileButtonActionPerformed
        // TODO add your handling code here:
        AFileButton.setEnabled(false);
        RFileButton.setEnabled(false);

        JFileChooser fc = new JFileChooser();
        fc.removeChoosableFileFilter(fc.getFileFilter());
        fc.setFileFilter(new FileNameExtensionFilter("Question Files", "q"));
        int op = fc.showOpenDialog(this);
        if (op == JFileChooser.APPROVE_OPTION)
        {
            Qfile = fc.getSelectedFile();
            if (Qfile.exists())
            {
                try
                {
                    ObjectInputStream in =
                            new ObjectInputStream(new FileInputStream(Qfile));
                    Q = (Test) in.readObject();
                    AFileButton.setEnabled(true);
//                    TestDetailsFrame t = new TestDetailsFrame(Questions);
//                    t.setVisible(true);
//                    this.setEnabled(false);
//                    this.dispose();
//                    if(t.isActive()==false)
//                    {
//                        this.setEnabled(true);
//                    }
                }
                catch (IOException ex)
                {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,
                            null, ex);
                }
                catch (ClassNotFoundException ex)
                {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,
                            null, ex);
                }

            }
            else
            {
                JOptionPane.showMessageDialog(this, "File Does not Exist",
                        "File Error!!!",
                        JOptionPane.ERROR_MESSAGE);
            }
        }

}//GEN-LAST:event_QFileButtonActionPerformed

    private void AFileButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AFileButtonActionPerformed
    {//GEN-HEADEREND:event_AFileButtonActionPerformed
        // TODO add your handling code here:
        RFileButton.setEnabled(false);
        JFileChooser fc = new JFileChooser();
        fc.removeChoosableFileFilter(fc.getFileFilter());
        fc.setFileFilter(new FileNameExtensionFilter("Answer Files", "a"));
        int op = fc.showOpenDialog(this);
        if (op == JFileChooser.APPROVE_OPTION)
        {
            AFile = fc.getSelectedFile();
            if (AFile.exists())
            {
                try
                {
                    ObjectInputStream in =
                            new ObjectInputStream(new FileInputStream(AFile));
                    A = (Test) in.readObject();

                    if (Q.Name.equals(A.Name) && Q.Course.equals(A.Course) &&
                            Q.SubName.equals(A.SubName) && Q.SubCode.equals(
                            A.SubCode) && Q.DateOfTest.equals(A.DateOfTest) &&
                            Q.NoOfSections == A.NoOfSections)
                    {
                        RFileButton.setEnabled(true);
                        return;
                    }

                    JOptionPane.showMessageDialog(this,
                            "Wrong answer file selected!!");
//                  
                }
                catch (IOException ex)
                {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,
                            null, ex);
                }
                catch (ClassNotFoundException ex)
                {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,
                            null, ex);
                }

            }
            else
            {
                JOptionPane.showMessageDialog(this, "File Does not Exist",
                        "File Error!!!",
                        JOptionPane.ERROR_MESSAGE);
            }

        }

    }//GEN-LAST:event_AFileButtonActionPerformed

    private void RFileButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_RFileButtonActionPerformed
    {//GEN-HEADEREND:event_RFileButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.removeChoosableFileFilter(fc.getFileFilter());
        fc.setFileFilter(new FileNameExtensionFilter("Response Files", "rsp"));
        fc.setFileSelectionMode(fc.FILES_ONLY);
        fc.setMultiSelectionEnabled(true);
        int op = fc.showOpenDialog(this);
        File list[];
        if (op == JFileChooser.APPROVE_OPTION)
        {
            Formatter out = null;
            list = fc.getSelectedFiles();
            for (int i = 0; i < list.length; i++)
            {
                RFile = list[i];
                if (RFile.isFile())
                {
                    if (RFile.exists())
                    {
                        try
                        {
                            ObjectInputStream in =
                                    new ObjectInputStream(new FileInputStream(
                                    RFile));
                            R = (Test) in.readObject();
                            if (Q.Course.equals(R.Course) && Q.SubName.equals(
                                    R.SubName) && Q.SubCode.equals(R.SubCode) &&
                                    Q.DateOfTest.equals(R.DateOfTest) &&
                                    Q.NoOfSections == R.NoOfSections)
                            {
                                Eval.evaluate(Q, A, R);
                                Report RPT = Eval.getReport();
                                File report =
                                        new File(list[0].getParent(),
                                        RPT.UserName + " - " + RPT.USN + " - " +
                                        RPT.Section + " - " + RPT.Class +
                                        ".html");
                                out = new Formatter(report);

                                if (RPT.FinalResult)
                                {
                                    out.format(
                                            "<html><head></head><body bgcolor = GREEN>");
                                }
                                else
                                {
                                    out.format(
                                            "<html><head></head><body bgcolor = RED>");
                                }
                                out.format(
                                        "Name = %s<br>USN = %s<br>Class = %s<br>Section = %s<br>",
                                        RPT.UserName, RPT.USN, RPT.Class,
                                        RPT.Section);

                                out.format("Final Result = %s<br>",
                                        RPT.FinalResult);

                                for (int j = 0; j < RPT.SM.length; j++)
                                {
                                    out.format("Section %d Cut Off = %2.2f<br>",
                                            (j + 1), RPT.CutOff[j]);
                                    out.format("Section %d marks scored = %2.2f<br>",
                                            (j + 1), RPT.SM[j]);
                                    if (RPT.SResult[j] == true)
                                    {
                                        out.format("Section %d result = %s<br>",
                                                (j + 1), "PASSED");
                                    }
                                    else
                                    {
                                        out.format("Section %d result = %s<br>",
                                                (j + 1), "FAILED");
                                    }

                                    for (int k = 0; k < RPT.QM[j].length; k++)
                                    {
                                        out.format(
                                                "Section %d, Question %d marks scored = %2.2f<br>",
                                                (j + 1), (k + 1), RPT.QM[j][k]);
                                    }
                                    out.format("</body></html>");
                                }

                            }
                            else
                            {
                                JOptionPane.showMessageDialog(this,
                                        "Wrong response file selected");
                                return;
                            }
//
                        }
                        catch (IOException ex)
                        {
                            Logger.getLogger(MainFrame.class.getName()).log(
                                    Level.SEVERE,
                                    null, ex);
                        }
                        catch (ClassNotFoundException ex)
                        {
                            Logger.getLogger(MainFrame.class.getName()).log(
                                    Level.SEVERE,
                                    null, ex);
                        }

                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this,
                                "File Does not Exist",
                                "File Error!!!",
                                JOptionPane.ERROR_MESSAGE);
                    }

                }

            }
            out.close();
        }
    }//GEN-LAST:event_RFileButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {
                new FilesInputFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AFileButton;
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton QFileButton;
    private javax.swing.JButton RFileButton;
    // End of variables declaration//GEN-END:variables
}
